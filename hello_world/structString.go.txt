// package main

// import (
// 	"bytes"
// 	"fmt"
// )

// type IPAddr [4]byte

// // TODO: Add a "String() string" method to IPAddr.

// func (ip IPAddr) String() string{
// 	var buffer bytes.Buffer
// 	for i, v := range ip{
// 		if i == len(ip) - 1 {
// 			buffer.WriteString(fmt.Sprintf("%v", v))
// 			continue
// 		}
// 		buffer.WriteString(fmt.Sprintf("%v.", v))
// 	}
// 	return buffer.String()
// }

// func main() {
// 	hosts := map[string]IPAddr{
// 		"loopback":  {127, 0, 0, 1},
// 		"googleDNS": {8, 8, 8, 8},
// 	}
// 	for _, ip := range hosts {
// 		//fmt.Printf("%v: %v\n", name, ip)
// 		fmt.Println(ip)
// 	}
// }

package main

import (
	"fmt"
	"time"
)

type MyError struct {
	When time.Time
	What string
}

func (e *MyError) Error() string {
	return fmt.Sprintf("at %v, %s",
		e.When, e.What)
}

func run() error {
	return &MyError{
		time.Now(),
		"it didn't work",
	}
}

func main() {
	if err := run(); err != nil {
		fmt.Println(err)
	}
}

