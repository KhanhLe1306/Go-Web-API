package main

import (
	"fmt"
	"sync"
	"time"
)

var wg = sync.WaitGroup{}
var mutex = sync.Mutex{}

var dbData = []string{"id1", "id2", "id3", "id4", "id5"}
var results = []string{}

func main(){
	t0 := time.Now()
	for i := 0; i < len(dbData); i++{
		wg.Add(1)
		go dbCall(i)
	}
	wg.Wait()
	fmt.Printf("Total execution time: %v", time.Since(t0))
	fmt.Println("Result: ", results)
}

func dbCall(index int){
	var delay int16 = 10
	time.Sleep(time.Duration(delay)*time.Millisecond)
	fmt.Println("The result from the database is: ", dbData[index])
	mutex.Lock()
	results = append(results, dbData[index])
	mutex.Unlock()
	wg.Done()
}

// package main

// import (
// 	"fmt"
// 	"time"
// )

// func say(s string) {
// 	for i := 0; i < 5; i++ {
// 		time.Sleep(100 * time.Millisecond)
// 		fmt.Println(s)
// 	}
// }

// func main() {
// 	go say("world")
// 	say("hello")
// }

